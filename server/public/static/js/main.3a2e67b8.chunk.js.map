{"version":3,"sources":["utils/AuthContext.js","components/shared/CenterContainer.js","components/Navigation/NavSide.js","components/Navigation/NavHeader.js","components/Navigation/NavLinks.js","components/shared/Backdrop.js","components/Navigation/Navigation.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","_id","userid","login","logout","CenterContainer","styled","div","NavSide","props","Aside","aside","ReactDOM","createPortal","show","onClick","children","document","getElementById","NavHeader","Header","header","NavUl","ul","Li","li","NavLinkA","NavLink","NavLinks","auth","useContext","to","Backdrop","Back","Navication","HambergerButton","button","StripeSpan","span","Title","h1","SideNav","nav","HeaderNav","useState","sideIsOpen","setSideIsOpen","closeSide","Fragment","style","textDecoration","BoldH1","Main","content","setContent","useEffect","axios","get","process","then","res","data","NewPost","React","lazy","Posts","Join","User","Container","App","routes","token","setToken","set_id","setUserid","useCallback","expire","exp","Date","getTime","localStorage","setItem","JSON","stringify","removeItem","stored","parse","getItem","path","exact","Provider","value","Navigation","fallback","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a2e67b8.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const AuthContext = createContext({\r\n  isLoggedIn: false,\r\n  _id: '',\r\n  userid: '',\r\n  login: () => {},\r\n  logout: () => {}\r\n});","// import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n  const CenterContainer = styled.div`\r\n  display: flex;\r\n  justify-context: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  min-height: 90vh;\r\n  border-top: 3em;\r\n  box-sizing: border-box;\r\n`\r\n\r\nexport default CenterContainer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst NavSide = props => {\r\n  const Aside = styled.aside`\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 10;\r\n    height: 100vh;\r\n    width: 70%;\r\n    background: white;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26 );\r\n    @media (min-width: 768px) {\r\n      display: none;\r\n  `\r\n\r\n  return ReactDOM.createPortal((\r\n    props.show && <Aside onClick={props.onClick}>{props.children}</Aside>\r\n  ), document.getElementById(\"side-hook\"));\r\n};\r\n\r\nexport default NavSide;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NavHeader = props => {\r\n  const Header = styled.header`\r\n    display: flex;\r\n    justify-context: center;\r\n    align-items: center;\r\n    background-color: #720B99;\r\n    padding: 1em;\r\n    font-family: 'Berkshire Swash', cursive;\r\n    color: white;\r\n    width: 100%;\r\n    height: 2em;\r\n    position: fixed;\r\n    top: 0;\r\n    z-index: 5;\r\n    @media (min-width: 768px) {\r\n      justify-content: space-between;\r\n    }\r\n  `\r\n  \r\n  return (\r\n    <Header>\r\n    {props.children}\r\n    </Header>\r\n  )\r\n}\r\n\r\nexport default NavHeader;","import React, { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport { AuthContext } from '../../utils/AuthContext';\r\n\r\nconst NavLinks = props => {\r\n  const auth = useContext(AuthContext);\r\n  return (\r\n    <NavUl>\r\n      {auth.isLoggedIn && <Li>\r\n        <NavLinkA to=\"/new\">New</NavLinkA>\r\n      </Li>}\r\n      <Li>\r\n        <NavLinkA to=\"/all\">Everyone</NavLinkA>\r\n      </Li>\r\n      {auth.isLoggedIn && <Li>\r\n        <NavLinkA to={`/user/${auth.userid}`}>My moments</NavLinkA>\r\n      </Li>}\r\n      {!auth.isLoggedIn && <Li>\r\n        <NavLinkA to=\"/join\">Start</NavLinkA>\r\n      </Li>}\r\n      {auth.isLoggedIn && <li>\r\n        <NavLinkA to=\"/all\" onClick={auth.logout}>Log out</NavLinkA>\r\n      </li>}\r\n    </NavUl>\r\n  );\r\n}\r\n\r\nconst NavUl = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0 1em;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  @media (min-width: 768px) {\r\n    flex-direction: row;\r\n  }\r\n`\r\nconst Li = styled.li`\r\n  margin: 1em;\r\n  @media (min-width: 768px) {\r\n    margin: 0 0.5em\r\n  }\r\n`\r\nconst NavLinkA = styled(NavLink)`\r\n  font-family: 'Impact', Verdana, sans-serif;\r\n  font-size: 1.3em;\r\n  font-weight: 200;\r\n  color: #A6165E;\r\n  text-decoration: none;\r\n  padding: 0.5em;\r\n  @media (min-width: 768px) {\r\n    color: white;\r\n  }\r\n  &:hover {\r\n    color: lightpink;\r\n  }\r\n`\r\n\r\nexport default NavLinks;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Backdrop = props => {\r\n  const Back = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: rgba(0, 0, 0, 0.75);\r\n    z-index: 7;\r\n  `\r\n  \r\n  return ReactDOM.createPortal(\r\n    <Back onClick={props.onClick} />,\r\n    document.getElementById('backdrop-hook')\r\n  );\r\n};\r\n\r\nexport default Backdrop;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport NavSide from './NavSide';\r\nimport NavHeader from './NavHeader';\r\nimport NavLinks from './NavLinks';\r\nimport Backdrop from '../shared/Backdrop';\r\n\r\nconst Navication = props => {\r\n  const HambergerButton = styled.button`\r\n    width: 2.5em;\r\n    height: 3em;\r\n    background: transparent;\r\n    border: none;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    margin-right: 2em;\r\n    curser: pointer;\r\n    @media (min-width: 768px) {\r\n      display: none;\r\n    }\r\n  `\r\n  const StripeSpan = styled.span`\r\n    width: 2.5em;\r\n    height: 2px;\r\n    background: white;\r\n  `\r\n  const Title = styled.h1`\r\n    font-family: 'Berkshire Swash', cursive;\r\n    color: white;\r\n    text-decoration: none;\r\n  `\r\n  const SideNav = styled.nav`\r\n    height: 100%\r\n  `\r\n  const HeaderNav = styled.nav`\r\n    display: none;\r\n    @media (min-width: 768px) {\r\n      display: block;\r\n    }\r\n  `\r\n\r\n  const [sideIsOpen, setSideIsOpen] = useState(false);\r\n  const openSide = () => setSideIsOpen(true);\r\n  const closeSide = () => setSideIsOpen(false);\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      {sideIsOpen && <Backdrop onClick={closeSide} />}\r\n      <NavSide show={sideIsOpen} onClick={closeSide}>\r\n        <SideNav>\r\n          <NavLinks />\r\n        </SideNav>\r\n      </NavSide>\r\n\r\n      <NavHeader>\r\n        <HambergerButton onClick={openSide}>\r\n          <StripeSpan/><StripeSpan/><StripeSpan/>\r\n        </HambergerButton>\r\n        <Link to=\"/\" style={{textDecoration: 'none'}}><Title>Greatful</Title></Link>\r\n        <HeaderNav>\r\n          <NavLinks />\r\n        </HeaderNav>\r\n      </NavHeader>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Navication;","import React, { useState, useEffect } from \"react\";\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nimport CenterContainer from '../components/shared/CenterContainer';\r\n\r\nconst Main = () => {\r\n  const [content, setContent] = useState();\r\n\r\n  useEffect(() => {\r\n    axios.get(process.env.REACT_APP_BACKEND_URL + '/api/post/one')\r\n    .then(res => setContent(res.data.content))\r\n  }, [])\r\n  \r\n  return (\r\n    <CenterContainer>\r\n      {content && <BoldH1>{content}</BoldH1>}\r\n    </CenterContainer>\r\n  )\r\n};\r\n\r\nconst BoldH1 = styled.h1`\r\n  font-family: 'Berkshire Swash', cursive;\r\n  color: white;\r\n  font-size: 3em;\r\n  letter-spacing: 0.1em;\r\n  color: white;\r\n  background-color: purple;\r\n  background-image: radial-gradient(circle at top right, #A6165E, #720B99 62.5%);\r\n  background-size: 100%;\r\n  background-repeat: repeat;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent; \r\n  -moz-background-clip: text;\r\n  -moz-text-fill-color: transparent;\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 5em;\r\n  }\r\n  @media (min-width: 576px) {\r\n    font-size: 4em;\r\n  }\r\n`\r\n\r\nexport default Main;","import React, { useState, useCallback, useEffect, Suspense } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport Navigation from \"./components/Navigation/Navigation\";\nimport { AuthContext } from \"./utils/AuthContext\";\nimport Main from \"./pages/Main\";\n// import NewPost from \"./pages/NewPost\";\n// import Posts from \"./pages/Posts\";\n// import Join from \"./pages/Join\";\n// import User from \"./pages/User\";\n\nconst NewPost = React.lazy(() => import('./pages/NewPost'));\nconst Posts = React.lazy(() => import('./pages/Posts'));\nconst Join = React.lazy(() => import('./pages/Join'));\nconst User = React.lazy(() => import('./pages/User'));\n\nconst App = () => {\n  const [token, setToken] = useState(false);\n  const [_id, set_id] = useState();\n  const [userid, setUserid] = useState();\n\n  const login = useCallback((_id, userid, token, expire) => {\n    setToken(token);\n    set_id(_id);\n    setUserid(userid);\n    const exp = expire || new Date(new Date().getTime() + 1000 * 60 * 60);\n    localStorage.setItem(\"user\", JSON.stringify({ _id, userid, token, exp }));\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(false);\n    set_id(null);\n    setUserid(null);\n    localStorage.removeItem(\"user\");\n  }, []);\n\n  useEffect(() => {\n    const stored = JSON.parse(localStorage.getItem(\"user\"));\n    if (\n      stored &&\n      stored.token &&\n      new Date(stored.exp).getTime() > new Date().getTime()\n    ) {\n      login(stored._id, stored.userid, stored.token, new Date(stored.exp));\n    }\n  }, [login]);\n\n  let routes;\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Main />\n        </Route>\n        <Route path=\"/new\">\n          <NewPost />\n        </Route>\n        <Route path=\"/all\">\n          <Posts />\n        </Route>\n        <Route path=\"/user/:userid\">\n          <User />\n        </Route>\n        <Redirect to=\"/all\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Main />\n        </Route>\n        <Route path=\"/all\">\n          <Posts />\n        </Route>\n        <Route path=\"/join\">\n          <Join />\n        </Route>\n        <Route path=\"/user/:userid\">\n          <User userid={userid} />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ isLoggedIn: !!token, _id, userid, token, login, logout }}\n    >\n      <Router>\n        <Navigation />\n        <Container><Suspense fallback={<div></div>}>{routes}</Suspense></Container>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nconst Container = styled.div`\n  margin: 5em auto 0 auto;\n  max-width: 768px;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}